<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>x_376096_ccp.copy_paste</name>
        <script><![CDATA[var x_376096_ccp = x_376096_ccp || {};
x_376096_ccp.copy_paste = (function() {
	"use strict";
	
	/* eslint no-undef: "error" */	
	x_376096_ccp.loader.get('window', function ($window) {
		if (!$window.g_form) {
			// copy and paste inject only makes sense on Glide Forms
			return;
		}
		
		let uploadInProgress = false;
		const observer = new $window.MutationObserver(function (mutations) {
			for (let i = 0; i < mutations.length; i++) {
				const mutation = mutations[i];
				if (mutation.addedNodes) {
					for (let j = 0; j < mutation.addedNodes.length; j++) {
						const node = mutation.addedNodes[j];
						if (node.tagName == 'RENDERED_BODY') {
							const attModal = node.closest('div#attachment');
							if (attModal && !node.classList.contains('ccp-copy-paste-injected')) {
								node.classList.add('ccp-copy-paste-injected');
								
								const progressBar = attModal.querySelector("#attachment #please_wait");
								attModal.addEventListener('paste', function (event) {
									const files = event.clipboardData.files;
									if (files.length) {
										uploadInProgress = true;

										if (progressBar) {
											progressBar.style.display = '';
										}
									}

									let remaining = files.length;
									for (let i = 0; i < files.length; i++) {
										const canAttach = true;
										const showView = true;
										const showPopup = true;
										const uploader = new $window.AttachmentUploader(event, files[i], i, canAttach, showView, showPopup);
										uploader.send(_ => {
											if (--remaining == 0) {
												uploadInProgress = false;

												if (progressBar) {
													progressBar.style.display = 'none';
												}
											}
										});
									}
								});
							}
						}
					}
				}
			}
		});
		
		observer.observe($window.document, {
			childList: true,
			subtree: true
		});
	});

	return {
		type: 'copy_paste'
	};
})();
]]></script>
        <script_name>copy_paste</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-01-15 10:10:08</sys_created_on>
        <sys_id>720d61b897f73d103c2d3f56f053afaf</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>x_376096_ccp.copy_paste</sys_name>
        <sys_package display_value="ClassicUI Copy Paste" source="x_376096_ccp">eea7c7799762b5103c2d3f56f053af9d</sys_package>
        <sys_policy/>
        <sys_scope display_value="ClassicUI Copy Paste">eea7c7799762b5103c2d3f56f053af9d</sys_scope>
        <sys_update_name>sys_ui_script_720d61b897f73d103c2d3f56f053afaf</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-01-15 19:02:48</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
